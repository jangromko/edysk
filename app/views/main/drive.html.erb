<nav id="context-menu" class="context-menu">
  <ul class="context-menu__items">
    <li class="context-menu__item">
      <a href="#" class="context-menu__link" data-action="Copy"><i class="fa fa-copy"></i> Kopiuj</a>
    </li>
    <li class="context-menu__item">
      <a href="#" class="context-menu__link" data-action="Cut"><i class="fa fa-cut"></i> Wytnij</a>
    </li>
    <li class="context-menu__item">
      <a href="#" class="context-menu__link" data-action="Paste"><i class="fa fa-paste"></i> Wklej</a>
    </li>
    <li class="context-menu__item">
      <a href="#" class="context-menu__link" data-action="Delete"><i class="fa fa-remove"></i> Usuń</a>
    </li>
    <li class="context-menu__item">
      <a href="#" class="context-menu__link" data-action="Share"><i class="fa fa-user-plus"></i> Udostępnij</a>
    </li>
  </ul>
</nav>
<script>
    (function ()
    {
        "use strict";

        /**
         * Function to check if we clicked inside an element with a particular class
         * name.
         *
         * @param {Object} e The event
         * @param {String} className The class name to check against
         * @return {Boolean}
         */
        function clickInsideElement(e, className)
        {
            var el = e.srcElement || e.target;

            if (el.classList.contains(className))
            {
                return el;
            } else
            {
                while (el = el.parentNode)
                {
                    if (el.classList && el.classList.contains(className))
                    {
                        return el;
                    }
                }
            }

            return false;
        }

        /**
         * Get's exact position of event.
         *
         * @param {Object} e The event passed in
         * @return {Object} Returns the x and y position
         */
        function getPosition(e)
        {
            var posx = 0;
            var posy = 0;

            if (!e) var e = window.event;

            if (e.pageX || e.pageY)
            {
                posx = e.pageX;
                posy = e.pageY;
            } else if (e.clientX || e.clientY)
            {
                posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            }

            return {
                x: posx,
                y: posy
            }
        }

        /**
         * Variables.
         */
        var contextMenuClassName = "context-menu";
        var contextMenuItemClassName = "context-menu__item";
        var contextMenuLinkClassName = "context-menu__link";
        var contextMenuActive = "context-menu--active";

        var itemClassName = "menu-files-and-folders-element";
        var itemInContext;

        var clickCoords;
        var clickCoordsX;
        var clickCoordsY;

        var menu = document.querySelector("#context-menu");
        var menuItems = menu.querySelectorAll(".context-menu__item");
        var menuState = 0;
        var menuWidth;
        var menuHeight;
        var menuPosition;
        var menuPositionX;
        var menuPositionY;

        var windowWidth;
        var windowHeight;

        /**
         * Initialise our application's code.
         */
        function init()
        {
            contextListener();
            clickListener();
            keyupListener();
            resizeListener();
        }

        /**
         * Listens for contextmenu events.
         */
        function contextListener()
        {
            document.addEventListener("contextmenu", function (e)
            {
                itemInContext = clickInsideElement(e, itemClassName);

                if (itemInContext)
                {
                    e.preventDefault();
                    toggleMenuOn();
                    positionMenu(e);
                } else
                {
                    itemInContext = null;
                    toggleMenuOff();
                }
            });
        }

        /**
         * Listens for click events.
         */
        function clickListener()
        {
            document.addEventListener("click", function (e)
            {
                var clickeElIsLink = clickInsideElement(e, contextMenuLinkClassName);

                if (clickeElIsLink)
                {
                    e.preventDefault();
                    menuItemListener(clickeElIsLink);
                } else
                {
                    var button = e.which || e.button;
                    if (button === 1)
                    {
                        toggleMenuOff();
                    }
                }
            });
        }

        /**
         * Listens for keyup events.
         */
        function keyupListener()
        {
            window.onkeyup = function (e)
            {
                if (e.keyCode === 27)
                {
                    toggleMenuOff();
                }
            }
        }

        /**
         * Window resize event listener
         */
        function resizeListener()
        {
            window.onresize = function (e)
            {
                toggleMenuOff();
            };
        }

        /**
         * Turns the custom context menu on.
         */
        function toggleMenuOn()
        {
            if (menuState !== 1)
            {
                menuState = 1;
                menu.classList.add(contextMenuActive);
            }
        }

        /**
         * Turns the custom context menu off.
         */
        function toggleMenuOff()
        {
            if (menuState !== 0)
            {
                menuState = 0;
                menu.classList.remove(contextMenuActive);
            }
        }

        /**
         * Positions the menu properly.
         *
         * @param {Object} e The event
         */
        function positionMenu(e)
        {
            clickCoords = getPosition(e);
            clickCoordsX = clickCoords.x;
            clickCoordsY = clickCoords.y;

            menuWidth = menu.offsetWidth + 4;
            menuHeight = menu.offsetHeight + 4;

            windowWidth = window.innerWidth;
            windowHeight = window.innerHeight;

            if ((windowWidth - clickCoordsX) < menuWidth)
            {
                menu.style.left = windowWidth - menuWidth + "px";
            } else
            {
                menu.style.left = clickCoordsX + "px";
            }

            if ((windowHeight - clickCoordsY) < menuHeight)
            {
                menu.style.top = windowHeight - menuHeight + "px";
            } else
            {
                menu.style.top = clickCoordsY + "px";
            }
        }

        /**
         * Dummy action function that logs an action when a menu item link is clicked
         *
         * @param {HTMLElement} link The link that was clicked
         */
        function menuItemListener(link)
        {
            if (itemInContext.getAttribute("dir-id") != null)
            {
                console.log("ID folderu: " + itemInContext.getAttribute("dir-id") + ", akcja - " + link.getAttribute("data-action"));
            }
            else if (itemInContext.getAttribute("file-id") != null)
            {
                console.log("ID pliku: " + itemInContext.getAttribute("file-id") + ", akcja - " + link.getAttribute("data-action"));
                if (link.getAttribute("data-action") == 'Delete')
                {
                  /*$http.delete("/file/remove", {
                   params: {
                   file_id: itemInContext.getAttribute("file-id")
                   }
                   }).then(function (response)
                   {
                   })

                   delete */
                }
            }

            toggleMenuOff();
        }

        /**
         * Run the app.
         */
        init();

    })();

</script>




<div class="path w3-padding">
  <div ng-repeat="directory in path" ng-click="open_directory(directory)" style="display: inline">
    <div class="path-item-separator glyphicon glyphicon-menu-right"></div>
    <button class="path-item">
      {{ directory.name }}
    </button>
  </div>
</div>

<table class="menu-files-and-folders">
  <tr class="menu-files-and-folders-header">
    <th>
      <div class="menu-files-and-folders-text" ng-click="change_sort('name')">
        Nazwa
        <span class="glyphicon glyphicon-chevron-up" ng-show="sort_options.by == 'name' && sort_options.order == 'asc'"></span>
        <span class="glyphicon glyphicon-chevron-down" ng-show="sort_options.by == 'name' && sort_options.order == 'desc'"></span>
      </div>
    </th>
    <th class="w3-hide-small">
      <div class="menu-files-and-folders-text" ng-click="change_sort('updated_at')">
        Ostatnio modyfikowany
        <span class="glyphicon glyphicon-chevron-up" ng-show="sort_options.by == 'updated_at' && sort_options.order == 'asc'"></span>
        <span class="glyphicon glyphicon-chevron-down" ng-show="sort_options.by == 'updated_at' && sort_options.order == 'desc'"></span>
      </div>
    </th>
  </tr>
  <tr class="menu-files-and-folders-element file-folder" dir-id={{directory.id}} ng-repeat="directory in directories" ng-dblclick="open_directory(directory)" ng-class="{ selected: (selected_directories.indexOf(directory.id) != -1), 'menu-files-and-folders-element-cut': (clipboard.cut == true && clipboard.selected_directories.indexOf(directory.id) != (-1))}" ng-click="select_directory($event, directory.id)">
    <td>
      <div class="menu-files-and-folders-text">
        <div class="files-folders-icon glyphicon glyphicon-folder-open"></div>
        {{ directory.name }}
      </div>
    </td>
    <td class="w3-hide-small">
      <div class="menu-files-and-folders-text">
        {{ directory.updated_at | date : "dd/MM/yyyy, HH:mm" : "UTC"}}
      </div>
    </td>
  </tr>

  <tr class="menu-files-and-folders-element" file-id={{file.id}} ng-repeat="file in files" ng-dblclick="download_file(file.id)" ng-click="select_file($event, file.id)" ng-class="{ selected: (selected_files.indexOf(file.id) != -1), 'menu-files-and-folders-element-cut': (clipboard.cut == true && clipboard.selected_files.indexOf(file.id) != (-1))}">
    <td>
      <div class="menu-files-and-folders-text">
        <div class="files-folders-icon glyphicon glyphicon-file"></div>
        {{ file.name }}
      </div>
    </td>
    <td class="w3-hide-small">
      <div class="menu-files-and-folders-text">
        {{ file.updated_at | date : "dd/MM/yyyy, HH:mm" : "UTC"}}
      </div>
    </td>
  </tr>
  <tr ng-click="unselect_all()">
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>


<div class="center">
  <p id="files_chart_title">Zobacz, jakie rodzaje plików masz na Edysku</p>
</div>
<div class="w3-col l3 m2 s0">
  <p></p>
</div>
<div class="center w3-col l6 m8 s12">
  <div class="ct-chart ct-square" id="files_chart"></div>
</div>
<div class="w3-col l3 m2 s0">
  <p></p>
</div>


<script>
    var chart = new Chartist.Pie('.ct-chart', {
        labels: ['JPG', 'PDF', 'MP3', 'ZIP', 'DOCX'],
        series: [40, 10, 35, 10, 5]
    }, {
        donut: true,
        showLabel: true,
        donutWidth: 10,
        startAngle: 270
    },

        [
            ['screen and (min-width: 80px)', {
                chartPadding: 70,
                labelOffset: 10,
                labelDirection: 'explode',
                donutWidth: 8,
                labelInterpolationFnc: function(value) {
                    return value;
                }
            }],
            ['screen and (min-width: 240px)', {
                chartPadding: 70,
                labelOffset: 20,
                labelDirection: 'explode',
                donutWidth: 15,
                labelInterpolationFnc: function(value) {
                    return value;
                }
            }],
            ['screen and (min-width: 720px)', {
                chartPadding: 70,
                labelOffset: 30,
                labelDirection: 'explode',
                donutWidth: 35,
                labelInterpolationFnc: function(value) {
                    return value;
                }
            }],
            ['screen and (min-width: 1024px)', {
                labelOffset: 80,
                chartPadding: 80,
                donutWidth: 80
            }]
        ]
    );

    chart.on('draw', function (data)
    {
        if (data.type === 'slice')
        {
            // Get the total path length in order to use for dash array animation
            var pathLength = data.element._node.getTotalLength();

            // Set a dasharray that matches the path length as prerequisite to animate dashoffset
            data.element.attr({
                'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
            });

            // Create animation definition while also assigning an ID to the animation for later sync usage
            var animationDefinition = {
                'stroke-dashoffset': {
                    id: 'anim' + data.index,
                    dur: 600,
                    from: -pathLength + 'px',
                    to: '0px',
                    easing: Chartist.Svg.Easing.easeOutQuint,
                    // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
                    fill: 'freeze'
                }
            };

            // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
            if (data.index !== 0)
            {
                animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
            }

            // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
            data.element.attr({
                'stroke-dashoffset': -pathLength + 'px'
            });

            // We can't use guided mode as the animations need to rely on setting begin manually
            // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
            data.element.animate(animationDefinition, false);
        }
    });
</script>


